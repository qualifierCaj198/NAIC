name: Deploy to Vultr

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  APP_DIR: ${{ secrets.APP_DIR }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Create release archive (git archive)
        run: |
          set -euo pipefail
          git archive --format=tar.gz -o release.tar.gz HEAD
          ls -lh release.tar.gz

      - name: Upload archive to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "release.tar.gz"
          target: "/tmp"
          overwrite: true

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail
            APP_DIR="${{ secrets.APP_DIR }}"
            RELEASE="/tmp/release.tar.gz"

            # Make app directories and place current release
            sudo mkdir -p "$APP_DIR/releases" "$APP_DIR/current"
            sudo chown -R "$USER":"$USER" "$APP_DIR"
            ts=$(date +%Y%m%d%H%M%S)
            if [ -d "$APP_DIR/current" ] && [ "$(ls -A $APP_DIR/current || true)" ]; then
              mv "$APP_DIR/current" "$APP_DIR/releases/$ts" || true
              mkdir -p "$APP_DIR/current"
            fi

            tar -xzf "$RELEASE" -C "$APP_DIR/current"
            rm -f "$RELEASE"
            cd "$APP_DIR/current"

            # ---------- Python app (Flask/Django/FastAPI) ----------
            if [ -f requirements.txt ]; then
              echo "[deploy] Detected Python app"
              sudo apt-get update -y
              sudo apt-get install -y python3-venv python3-pip
              python3 -m venv .venv || true
              . .venv/bin/activate
              pip install --upgrade pip wheel
              pip install -r requirements.txt
            fi

            # ---------- Node app (Express/Next/Vite/React) ----------
            if [ -f package.json ]; then
              echo "[deploy] Detected Node app"
              if ! command -v node >/dev/null 2>&1; then
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                sudo apt-get install -y nodejs
              fi
              npm ci || npm install
              # Build if build script exists
              if command -v jq >/dev/null 2>&1; then
                :
              else
                sudo apt-get install -y jq
              fi
              if jq -er '.scripts.build' package.json >/dev/null 2>&1; then
                npm run build || true
              fi
            fi

            # ---------- Docker (compose) path ----------
            if [ -f docker-compose.yml ] || [ -f compose.yml ]; then
              echo "[deploy] Detected docker compose"
              if ! command -v docker >/dev/null 2>&1; then
                curl -fsSL https://get.docker.com | sh
                sudo usermod -aG docker "$USER"
              fi
              if docker compose version >/dev/null 2>&1; then
                DOCKER_COMPOSE="docker compose"
              else
                sudo apt-get install -y docker-compose || true
                DOCKER_COMPOSE="docker-compose"
              fi
              $DOCKER_COMPOSE pull || true
              $DOCKER_COMPOSE up -d --build
            fi

            # ---------- Process restarts (best-effort) ----------
            if [ -n "${SERVICE_NAME:-}" ]; then
              echo "[deploy] Restarting systemd service: $SERVICE_NAME"
              sudo systemctl restart "$SERVICE_NAME" || true
            elif systemctl list-units --type=service | grep -qE '(gunicorn|uvicorn|app\.service)'; then
              for svc in gunicorn uvicorn app; do
                sudo systemctl restart "$svc" 2>/dev/null || true
              done
            fi

            if [ -f ecosystem.config.js ] || [ -f ecosystem.config.cjs ] || [ -f ecosystem.config.mjs ]; then
              if ! command -v pm2 >/dev/null 2>&1; then
                sudo npm i -g pm2
              fi
              pm2 start ecosystem.config.* --update-env || true
              pm2 save || true
            fi

            echo "[deploy] Done. Current code is at $APP_DIR/current"
